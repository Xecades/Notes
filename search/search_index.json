{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Here are my notes on various topics. I am trying to keep them as concise as possible, so that I can review them quickly. The notes are written in Markdown (with LaTeX embedded). I am using MkDocs to generate the site.</p> <p>This site is in general for educational purposes in computer science and mathematics. Not trying to show off, but I hope it could help random people on the Internet or myself (when my memory fails me). As a non-native English speaker, I guarantee no perfectness of grammar or expressions, but I will do my best to make them not that strange. If you come across any mistakes, feel free to open an issue or pull request, or simply email me.</p> <p>All content on this site is licensed under CC BY-NC-SA 4.0.</p>"},{"location":"#who-am-i","title":"Who am I?","text":"<p>I am currently an undergraduate student of Zhejiang University, China. You can refer to my personal website (which is written in Chinese) for further information. If you have difficulty reading Chinese, here are some of my profiles:</p> <ul> <li>GitHub: github.com/Xecades</li> <li>Telegram: t.me/Xecades</li> <li>Email: <code>xecadeszhe#gmail.com</code> or <code>i#xecades.xyz</code>* (replace # with @)</li> <li>QQ: Check TXT record of <code>qq.xecades.xyz</code></li> </ul> <p>* Please be aware that certain email providers may block custom domain emails. If you do not receive my response, please check your spam folder.</p>"},{"location":"#why-am-i-using-english","title":"Why am I using English?","text":"<p>(It is said that) English courses are not required for Turing Class. To make up for that, I am considering using English for my notes.</p>"},{"location":"#privacy","title":"Privacy","text":"<p>This site is hosted on GitHub Pages, a static site hosting service. GitHub Pages does collect IP address, but I don't have access to it. I am using Google Analytics to collect visitor statistics. The only two cookies the site generates are from it. If you prefer not to be tracked, you can use an ad blocker to block it. The only third-party plugin enabled globally in this site is MathJax, which helps to render math notations. I have no idea how to harvest data from MathJax. For several pages I enabled Giscus, a GitHub-based comment system. You can refer to Giscus Privacy Policy for more information. If you have any other concerns, you can review the source code on GitHub.</p>"},{"location":"cs/basis/manuals-standards/","title":"Manuals and Standards","text":""},{"location":"cs/basis/manuals-standards/#rfc-2119","title":"RFC 2119","text":"<p>Refer to: RFC 2119.</p> <p>RFC 2119 specifies keywords that are used to help in the interpretation of requirements:</p> <ol> <li>MUST / REQUIRED / SHALL</li> <li>MUST NOT / SHALL NOT</li> <li>SHOULD / RECOMMENDED</li> <li>SHOULD NOT / NOT RECOMMENDED</li> <li>MAY / OPTIONAL</li> </ol>"},{"location":"cs/basis/manuals-standards/#licensing","title":"Licensing","text":"<p>Refer to: Choose a License / Creative Commons / Open Source Initiative.</p>"},{"location":"cs/basis/manuals-standards/#semantic-versioning","title":"Semantic Versioning","text":"<p>Refer to: Semantic Versioning.</p> <p>Given a version number <code>MAJOR.MINOR.PATCH</code>, increment the:</p> <ul> <li><code>MAJOR</code> version when you make incompatible API changes.</li> <li><code>MINOR</code> version when you add functionality in a backward compatible manner.</li> <li><code>PATCH</code> version when you make backward compatible bug fixes.</li> </ul>"},{"location":"cs/basis/manuals-standards/#conventional-commits","title":"Conventional Commits","text":"<p>Refer to: Conventional Commits / Angular Convention.</p> <p>Structure of the commit message:</p> <pre><code>&lt;type&gt;[optional scope]: &lt;description&gt;\n\n[optional body]\n\n[optional footer(s)]\n</code></pre> <ul> <li><code>fix</code>: correlates with <code>PATCH</code> in SemVer.</li> <li><code>feat</code>: correlates with <code>MINOR</code> in SemVer.</li> <li><code>BREAKING CHANGE</code>: a commit that has a footer <code>BREAKING CHANGE</code>, or appends a <code>!</code> after the type/scope, correlating with <code>MAJOR</code> in SemVer.</li> <li><code>&lt;type&gt;</code>: <code>build</code>, <code>chore</code>, <code>ci</code>, <code>docs</code>, <code>style</code>, <code>refactor</code>, <code>perf</code>, <code>test</code>, etc.</li> <li><code>&lt;description&gt;</code>:<ul> <li>use the imperative, present tense: \"change\" not \"changed\" nor \"changes\".</li> <li>don't capitalize the first letter.</li> <li>no dot (<code>.</code>) at the end.</li> </ul> </li> </ul> <p>Example:</p> <pre><code>chore!: drop support for Node 6\n\nBREAKING CHANGE: use JavaScript features not available in Node 6.\n</code></pre>"},{"location":"cs/basis/mit-missing-semester/","title":"MIT Missing Semester","text":"<p>\ud83d\udcd6 COURSE-STARTED-AT: 2023-11-5</p> <p>\ud83d\udd2e COURSE-FINISHED-AT: 2023-11-11</p> <p>\ud83d\udd17 COURSE-SITE: missing.csail.mit.edu</p> <p>MIT Missing Semester is a course that teaches the untaught parts of computer science.</p> <p>Classes teach you all about advanced topics within CS, from operating systems to machine learning, but there\u2019s one critical subject that\u2019s rarely covered, and is instead left to students to figure out on their own: proficiency with their tools. We\u2019ll teach you how to master the command-line, use a powerful text editor, use fancy features of version control systems, and much more!</p> <p>\u2014\u2014MIT Missing Semester</p> <p>For the parts I'm already familiar with, I skip them.</p>"},{"location":"cs/basis/mit-missing-semester/#shell-scripting","title":"Shell Scripting","text":""},{"location":"cs/basis/mit-missing-semester/#variables","title":"Variables","text":"<p>To define a variable: use <code>foo=bar</code> instead of <code>foo = bar</code>. The latter tries to run a command named <code>foo</code> with arguments <code>=</code> and <code>bar</code>.</p> <p>To use a variable: use <code>$foo</code>.</p> <p>Special variables: (take <code>./script.sh foo bar</code> as an example)</p> <ul> <li><code>$0</code>: <code>./script.sh</code>, name of the script.</li> <li><code>$1</code> to <code>$9</code>: <code>foo</code> to <code>bar</code>, arguments to the script.</li> <li><code>$@</code>: <code>foo bar</code>, all arguments.</li> <li><code>$#</code>: <code>2</code>, number of arguments.</li> <li><code>$?</code>: Return code of the previous command.</li> <li><code>$$</code>: PID of the current script.</li> <li><code>$_</code>: Last argument of the last command.</li> </ul> <p>Arithmetic: use <code>((x + y))</code> to do arithmetic. Use <code>$((x + y))</code> to use the result of the arithmetic. Comparisons like <code>((x &gt;= y))</code> are also supported.</p>"},{"location":"cs/basis/mit-missing-semester/#operators","title":"Operators","text":"<p>Operator <code>||</code>, <code>&amp;&amp;</code> and <code>;</code>:</p> <ul> <li><code>foo || bar</code> means \"run <code>foo</code>, if it fails, run <code>bar</code>\".</li> <li><code>foo &amp;&amp; bar</code> means \"run <code>foo</code>, if it succeeds, run <code>bar</code>\".</li> <li><code>foo ; bar</code> means \"run <code>foo</code>, then run <code>bar</code>\".</li> </ul> <p>Example:</p> <pre><code>false || echo \"Oops, fail\"           # Oops, fail\ntrue || echo \"Will not be printed\"   #\ntrue &amp;&amp; echo \"Things went well\"      # Things went well\nfalse &amp;&amp; echo \"Will not be printed\"  #\ntrue ; echo \"This will always run\"   # This will always run\nfalse ; echo \"This will always run\"  # This will always run\n</code></pre> <p>Command substitution: use <code>$(foo)</code> to run <code>foo</code> and use its output as a string. Example: <code>for file in $(ls)</code> iterates over all files.</p> <p>Process substitution: <code>&lt;(foo)</code> will run <code>foo</code> and place the output in a temporary file and substitute the <code>&lt;()</code> with that file\u2019s name. Example: <code>diff &lt;(ls foo) &lt;(ls bar)</code> compares the files of directory <code>foo</code> and <code>bar</code>.</p>"},{"location":"cs/basis/mit-missing-semester/#redirection","title":"Redirection","text":"<p>Input: use <code>&lt;</code> to redirect input from a file.</p> <p>Output: use <code>&gt;</code> to redirect output to a file. Use <code>&gt;&gt;</code> to append to a file.</p> <p>Error: use <code>2&gt;</code> to redirect error to a file.</p> <p>Both output and error: use <code>&amp;&gt;</code> to redirect both output and error to a file.</p> <p>Both input and output: use <code>&lt;&gt;</code> to redirect both input and output to a file.</p> <p>Discard: redirect to <code>/dev/null</code> to discard output/error/input.</p> <p>Pipe: use <code>|</code> to pipe the output of a command to the input of another command.</p>"},{"location":"cs/basis/mit-missing-semester/#control-flow","title":"Control Flow","text":"<p><code>If</code>: use <code>if foo; then bar; fi</code> to run <code>bar</code> if <code>foo</code> succeeds. <code>foo</code> can be any command or a test. Refer to <code>man test</code> for more information about tests. Here are some simple examples:</p> <ul> <li><code>if [[ -d foo ]];</code>: if <code>foo</code> is a directory.</li> <li><code>if [[ -f foo ]];</code>: if <code>foo</code> is a file.</li> <li><code>if [[ $foo -ne 0 ]];</code>: if <code>foo</code> is not equal to <code>0</code>.</li> <li><code>if [[ $foo -gt 0 ]];</code>: if <code>foo</code> is greater than <code>0</code>.</li> </ul> <p>The <code>[[ ]]</code> notation is syntactic sugar for the <code>test</code> command. The following two lines are equivalent:</p> <pre><code>if [[ -d foo ]]; then\nif test -d foo; then\n</code></pre> <p><code>[[ ]]</code> notation provides more features than <code>test</code>. For example, <code>[[ ]]</code> supports <code>&amp;&amp;</code> and <code>||</code> operators, while <code>test</code> does not.</p> <p><code>For</code>, <code>While</code> and <code>Until</code>:</p> <pre><code># Run baz for each foo in bar\nfor foo in bar; do baz; done\n# e.g. Print all files in the current directory\nfor file in $(ls); do echo $file; done\n# Run bar while foo succeeds\nwhile foo; do bar; done\n# e.g. Print \"Hello\" forever\nwhile true; do echo \"Hello\"; done\n# Run bar until foo succeeds\nuntil foo; do bar; done\n# e.g. Print \"Hello\" forever\nuntil false; do echo \"Hello\"; done\n</code></pre> <p>Case: see the example:</p> <pre><code>case $fruit in\napple)\necho \"It's an apple.\"\n;;\nbanana)\necho \"It's a banana.\"\n;;\norange|lemon) # \"|\" means \"or\"\necho \"It's an orange or a lemon.\"\n;;\n*)\necho \"It's an unknown fruit.\"\n;;\nesac\n</code></pre> <p>Functions: use <code>foo() { bar; }</code> to define a function named <code>foo</code> that runs <code>bar</code>. Example:</p> <pre><code>multiply() {\nresult=$(($1 * $2))\necho \"The result of multiplication is: $result\"\n}\n# Call the function\nmultiply 5 3\n</code></pre>"},{"location":"cs/basis/mit-missing-semester/#others","title":"Others","text":"<p>Shebang: use <code>#!/bin/bash</code> to specify the interpreter of the script. The shebang must be the first line of the script. You can also choose python as the interpreter, e.g. <code>#!/usr/bin/env python</code>.</p> <p>Exit code: use <code>exit 0</code> to exit with code <code>0</code>. Use <code>exit</code> to exit with the return code of the last command.</p>"},{"location":"cs/basis/mit-missing-semester/#homework","title":"Homework","text":"<p>Write a command or script to recursively find the most recently modified file in a directory. More generally, can you list all files by recency?</p> <p>Here is my implementation of the first part of the homework.</p> <pre><code>__check_modified() {\nlocal file\n    file=$(ls -t \"$1\" | head -n1)\nwhile [[ -d \"$1/$file\" ]]; do\nfile=$(ls -t \"$1/$file\" | head -n1)\ndone\necho \"$1/$file\"\n}\n__check_modified \"$1\"\n</code></pre>"},{"location":"cs/basis/mit-missing-semester/#data-wrangling","title":"Data Wrangling","text":"<p>I don't know how to document this part, so I just note down some useful tools.</p> <ul> <li><code>grep</code>: search for a pattern in a file.</li> <li><code>sed</code>: stream editor.</li> <li><code>awk</code>: pattern scanning and processing language.</li> <li><code>sort</code>: sort lines of text files.</li> <li><code>uniq</code>: report or omit repeated lines.</li> <li><code>paste</code>: merge lines of files.</li> <li><code>wc</code>: print newline, word, and byte counts for each file.</li> <li><code>tee</code>: read from standard input and write to standard output and files.</li> <li><code>tr</code>: translate or delete characters.</li> <li><code>tac</code>: reverse <code>cat</code>.</li> <li><code>less</code>: open a file for interactive reading.</li> <li><code>head</code>: output the first part of files.</li> <li><code>tail</code>: output the last part of files.</li> <li><code>xargs</code>: build and execute command lines from standard input.</li> <li><code>bc</code>: arbitrary precision calculator language.</li> <li><code>jq</code>: command-line JSON processor.</li> <li><code>pup</code>: command line tool for processing HTML.</li> </ul> <p>One more thing: Learning Regex can be incredibly useful. It's definitely worth investing time in it!</p>"},{"location":"cs/basis/mit-missing-semester/#command-line-environment","title":"Command-line Environment","text":""},{"location":"cs/basis/mit-missing-semester/#job-control","title":"Job Control","text":"<p>When pressed <code>Ctrl-C</code>, the shell delivers a SIGINT SIGnal to the process, which by default INTerrupts the process.</p> <p>This python program captures SIGINT and ignores it:</p> <pre><code>import signal, time\ndef handler(signum, time):\nprint(\"\\nI got a SIGINT, but I am not stopping\")\nsignal.signal(signal.SIGINT, handler)\n# This program is a simple counter\ni = 0\nwhile True:\ntime.sleep(.1)\nprint(\"\\r{}\".format(i), end=\"\")\ni += 1\n</code></pre> <p>When we run this program and press <code>Ctrl-C</code>, the program will continue to run. To stop it, we need to send a SIGQUIT signal to it, by typing <code>Ctrl-\\</code>.</p> <pre><code>$ python sigint.py\n16^C\nI got a SIGINT, but I am not stopping\n25^C\nI got a SIGINT, but I am not stopping\n45^\\[1]    54634 quit       python sigint.py\n</code></pre> <p>Note that SIGINT and SIGQUIT can both be captured by the program. However, SIGTERM cannot. It is a more graceful way to TERMinate the process. To send the signal we can use <code>kill -TERM &lt;PID&gt;</code> or <code>kill &lt;PID&gt;</code> for short.</p> <p><code>Ctrl-Z</code> is used to suspend a process. It sends a SIGTSTP signal, short for \"terminal stop\". When a process is suspended, it pauses.</p> <p>Command <code>jobs</code> lists the unfinished jobs associated with the current terminal session. For example, if I suspended the <code>sigint.py</code> program above:</p> <pre><code>$ python sigint.py\n25^Z\n[1]  + 56852 suspended  python sigint.py\n$ jobs\n[1]  + suspended  python sigint.py\n</code></pre> <p>Then we can use <code>fg</code> to bring the job to the foreground, and <code>bg</code> to the background.</p> <pre><code>$ fg %1      # %1 means it is the first job\n[1]  + 56852 continued  python sigint.py\n75           # Number counting continues\n</code></pre> <p>By using the <code>&amp;</code> suffix, a command runs in the background but still prints to the terminal.</p> <p>To background a program we can use <code>Ctrl-Z</code> and <code>bg</code>, but note that the process will die if you close the terminal. To prevent this, we can use <code>nohup</code> to run the program in the background, it sets the process to ignores SIGHUP signal, which is sent to a process when the terminal session ends.</p> <pre><code>$ nohup python sigint.py &amp;\n</code></pre> <p>To get a comprehensive list of signals, check <code>man signal</code>.</p>"},{"location":"cs/basis/mit-missing-semester/#terminal-multiplexers","title":"Terminal Multiplexers","text":"<p>Refer to Tmux.</p> <p>Here is a tutorial: A Quick and Easy Guide to tmux.</p>"},{"location":"cs/basis/mit-missing-semester/#version-control-git","title":"Version Control (Git)","text":"<p>Here I list some useful commands that I'm not familiar with. I won't dig into that too much.</p> <pre><code>$ git log --all --graph --decorate\n$ git clone --shallow\n$ git fetch\n$ git stash\n$ git stash pop\n</code></pre>"},{"location":"cs/basis/mit-missing-semester/#metaprogramming","title":"Metaprogramming","text":"<p>Here is an example of a simple Makefile that compiles a LaTeX document.</p> <pre><code>paper.pdf: paper.tex plot-data.png\npdflatex paper.tex\n\nplot-%.png: %.dat plot.py\n./plot.py -i $*.dat -o $@\n</code></pre>"},{"location":"cs/basis/mit-missing-semester/#security-and-cryptography","title":"Security and Cryptography","text":""},{"location":"cs/basis/mit-missing-semester/#cryptographic-hash-function","title":"Cryptographic hash function","text":"<p>Cryptographic hash functions map an arbitrary length input to a fixed-length output. The general model is</p> <pre><code>hash(value: array&lt;byte&gt;) -&gt; vector&lt;byte, N&gt;  (for some fixed N)\n</code></pre> <p>It has the following properties:</p> <ul> <li>Deterministic: the same input maps to the same output.</li> <li>Non-invertible: it is hard to find an input m such that <code>hash(m) = h</code> for some desired output <code>h</code>.</li> <li>Target collision resistant: given an input <code>m1</code>, it\u2019s hard to find a different input <code>m2</code> such that <code>hash(m1) = hash(m2)</code>.</li> <li>Collision resistant: it\u2019s hard to find two inputs <code>m1</code> and <code>m2</code> such that <code>hash(m1) = hash(m2)</code> (this is a strictly stronger property than target collision resistance).</li> </ul> <p>Note that it is hard to find a collision, but it is not completely impossible. This is why each cryptographic hash function has a lifespan.</p> <p>A widely used cryptographic hash function is SHA-1. For example, Git uses SHA-1 to identify commits. But it is not secure anymore. To generate an SHA-1 hash, we can use the <code>shasum</code> command on macOS.</p> <pre><code>$ echo \"hello, world\" | shasum -a 1\ncd50d19784897085a8d0e3e413f8612b097c03f1  -\n</code></pre> <p>Imagine we're playing a number-guessing game. I've thought of a random number, and you're trying to guess it. You need to share your guess before I reveal if it's correct.</p> <p>Now, to ensure I don't cheat by altering the number in my mind, we can employ a cryptographic hash function. Before you make your guess, I'll share the hash of my number. After the game, you can verify that I haven't tampered with the chosen number by checking the hash of your guessed number.</p>"},{"location":"cs/basis/mit-missing-semester/#key-derivation-function","title":"Key derivation function","text":"<p>Key derivation functions, or KDFs, share similarities with cryptographic hash functions, but they are specifically designed for deriving secret keys from a given input, typically a password or a low-entropy key. KDFs are intentionally designed to operate at a slow pace, making it time-consuming to brute-force the password.</p> <p>Applications:</p> <ul> <li>Producing keys from passphrases for use in other cryptographic algorithms (e.g. symmetric cryptography).</li> <li>Storing login credentials. Storing plaintext passwords is bad; the right approach is to generate and store a random salt <code>salt = random()</code> for each user, store <code>KDF(password + salt)</code>, and verify login attempts by re-computing the KDF given the entered password and the stored salt.</li> </ul>"},{"location":"cs/basis/mit-missing-semester/#symmetric-cryptography","title":"Symmetric cryptography","text":"<p>Symmetric cryptography is used to encrypt and decrypt data. It uses a secret key to encrypt and decrypt data. The same key is used for both encryption and decryption. The model is</p> <pre><code>keygen() -&gt; key  (this function is randomized)\n\nencrypt(plaintext: array&lt;byte&gt;, key) -&gt; array&lt;byte&gt;  (the ciphertext)\ndecrypt(ciphertext: array&lt;byte&gt;, key) -&gt; array&lt;byte&gt;  (the plaintext)\n</code></pre> <p>An example of a symmetric cryptosystem in wide use today is AES.</p>"},{"location":"cs/basis/mit-missing-semester/#asymmetric-cryptography","title":"Asymmetric cryptography","text":"<p>Except for encrypting and decrypting data, asymmetric cryptography can also be used to sign and verify data. It uses a public key and a private key. The public key is used to encrypt data and verify signatures, while the private key is used to decrypt data and sign data. The model is</p> <pre><code>keygen() -&gt; (public-key, private-key)  (this function is randomized)\n\nencrypt(plaintext: array&lt;byte&gt;, public-key) -&gt; array&lt;byte&gt;  (the ciphertext)\ndecrypt(ciphertext: array&lt;byte&gt;, private-key) -&gt; array&lt;byte&gt;  (the plaintext)\n\nsign(message: array&lt;byte&gt;, private-key) -&gt; array&lt;byte&gt;  (the signature)\nverify(message: array&lt;byte&gt;, signature: array&lt;byte&gt;, public-key) -&gt; bool  (whether or not the signature is valid)\n</code></pre> <p>As its name suggests, public key can be made public. Anyone can use the public key to encrypt data for you, but only you, with the corresponding private key, can decrypt it. That's how private messaging apps like Telegram works.</p> <p>On the flip side, you can sign data using your private key. Others can then verify the signature using your public key. This mechanism is exemplified in practices such as verifying commits in Git through digital signatures.</p>"},{"location":"cs/c-cpp/c-language-cheatsheet/","title":"C Language Cheatsheet","text":""},{"location":"cs/c-cpp/c-language-cheatsheet/#operator-precedence","title":"Operator Precedence","text":"<p>Refer to cppreference.</p>"},{"location":"cs/c-cpp/c-language-cheatsheet/#format-string","title":"Format String","text":"<p>The syntax of a format placeholder is</p> <pre><code>%[parameter][flags][width][.precision][length]type\n</code></pre> <p>* Square brackets indicate optional parts of the placeholder.</p>"},{"location":"cs/c-cpp/c-language-cheatsheet/#type","title":"Type","text":"Type Description <code>%</code> Prints <code>%</code>. <code>d</code> Decimal <code>signed int</code>. <code>u</code> Decimal <code>unsigned int</code>. <code>o</code> Octal <code>unsigned int</code>. <code>x</code>, <code>X</code> Hexadecimal <code>unsigned int</code>. <code>x</code> for lower-case and <code>X</code> for upper-case. <code>f</code> Float-point types in fixed-point notation. <code>e</code>, <code>E</code> Float-point types in exponential notation: <code>d.ddde\u00b1dd</code>. <code>e</code> for lower-case \"e\" and <code>E</code> for upper-case. <code>g</code>, <code>G</code> Float-point types in either fixed-point or exponential notation, whichever is more appropriate for its magnitude. <code>g</code> for lower-case and <code>G</code> for upper-case. <code>a</code>, <code>A</code> Float-point in hexadecimal notation, starting with <code>0x</code> or <code>0X</code>. <code>a</code> for lower-case and <code>A</code> for upper-case. <code>s</code> <code>null</code>-terminated string. <code>c</code> <code>char</code>. <code>p</code> <code>void*</code> in an implementation-defined format. <code>n</code> Print nothing, but writes the number of characters written so far into an integer pointer parameter. <p>Examples:</p> <pre><code>printf(\"%%\");                // %\nprintf(\"%d\", 123);           // 123\nprintf(\"%d\", -123);          // -123\nprintf(\"%u\", 123);           // 123\nprintf(\"%u\", -123);          // 4294967173\nprintf(\"%o\", 123);           // 173\nprintf(\"%x\", 123);           // 7b\nprintf(\"%X\", 123);           // 7B\nprintf(\"%f\", 123.456);       // 123.456000\nprintf(\"%e\", 123.456);       // 1.234560e+02\nprintf(\"%E\", 123.456);       // 1.234560E+02\nprintf(\"%g\", 123.456);       // 123.456\nprintf(\"%G\", 123.456);       // 123.456\nprintf(\"%g\", 123456789.123); // 1.23457e+08\nprintf(\"%G\", 123456789.123); // 1.23457E+08\nprintf(\"%a\", 123.456);       // 0x1.edd2f1a9fbe77p+6\nprintf(\"%A\", 123.456);       // 0X1.EDD2F1A9FBE77P+6\nprintf(\"%s\", \"Hello\");       // Hello\nprintf(\"%c\", 'H');           // H\nint a = 123;\nprintf(\"%p\", &amp;a);            // 0x16d79b3d8\nint n;\nprintf(\"Hello%n\", &amp;n);       // Hello\nprintf(\"%d\", n);             // 5\n</code></pre>"},{"location":"cs/c-cpp/c-language-cheatsheet/#others","title":"Others","text":"<p>For further information, refer to Wikipedia.</p> <p>Here are some common examples:</p> <pre><code>printf(\"[%5d]\", 123);         // [  123]\nprintf(\"[%-5d]\", 123);        // [123  ]\nprintf(\"[%05d]\", 123);        // [00123]\nprintf(\"[%+5d]\", 123);        // [ +123]\nprintf(\"[%*d]\", 5, 123);      // [  123] (dynamic width)\nprintf(\"[%.1f]\", 123.456);    // [123.5]\nprintf(\"[%10f]\", 123.456);    // [123.456000] (10 characters in total)\nprintf(\"[%10.5f]\", 123.456);  // [ 123.45600] (5 precision, 10 characters)\nprintf(\"[%010.5f]\", 123.456); // [0123.45600] (5 precision, 10 characters)\n</code></pre>"},{"location":"cs/lisp/scheme/","title":"Scheme","text":"<p>Scheme is a dialect of the Lisp family of programming languages, known for its minimalism and simplicity. Many developers consider Scheme a very elegant language.</p> <p>Scheme is a very simple language, much easier to implement than many other languages of comparable expressive power. This ease is attributable to the use of lambda calculus to derive much of the syntax of the language from more primitive forms.</p> <p>\u2014\u2014Wikipedia</p> <p>Online REPL: try.scheme.org.</p>"},{"location":"cs/lisp/scheme/#syntax","title":"Syntax","text":""},{"location":"cs/lisp/scheme/#primitives","title":"Primitives","text":"<p>Scheme has a set of atomic primitive expressions. Atomic means that these expressions cannot be divided up. For example:</p> <pre><code>scm&gt; 123     ; Number\n123\nscm&gt; #f      ; False\n#f\nscm&gt; #t      ; True\n#t\nscm&gt; \"Hello\" ; String\n\"Hello\"\n</code></pre> <p>Note that the only primitive in Scheme that is false is <code>#f</code>. All other values are true.</p>"},{"location":"cs/lisp/scheme/#call-expressions","title":"Call Expressions","text":"<p><code>(&lt;operator&gt; &lt;operand1&gt; &lt;operand2&gt; ...)</code></p> <p>All expressions are written in the form of a list, with the first element being the operator and the rest being the operands. For example:</p> <pre><code>scm&gt; (+ 1 2 3)                  ; 1 + 2 + 3 = 6\n6\nscm&gt; (* (+ 1 2) 3 4)            ; (1 + 2) * 3 * 4 = 36\n36\nscm&gt; (even? (* (+ 1 2) 3 4))    ; Is 36 even?\n#t\nscm&gt; (- 5)                      ; -5\n-5\nscm&gt; (- 1 2 3)                  ; 1 - 2 - 3 = -4\n-4\nscm&gt; (&gt;= 1 2)                   ; Is 1 &gt;= 2?\n#f\nscm&gt; (string-append \"Hello\" \" \" \"World\")\n\"Hello World\"\n</code></pre> <p>In the examples above, <code>+</code>, <code>-</code>, <code>*</code>, <code>&gt;=</code>, <code>even?</code> and <code>string-append</code> are all procedure (function) names.</p> <p>Commonly used math procedures: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>abs</code>, <code>quotient</code>, <code>remainder</code>, <code>modulo</code>, <code>min</code>, <code>max</code>, <code>expt</code>, <code>sqrt</code>, <code>sin</code>, <code>cos</code>, <code>tan</code>, <code>asin</code>, <code>acos</code>, <code>atan</code>, <code>log</code>, <code>exp</code>, <code>floor</code>, <code>ceiling</code>, <code>round</code>.</p>"},{"location":"cs/lisp/scheme/#special-forms","title":"Special Forms","text":"<p>Special forms are expressions that are not evaluated in the same way as call expressions. For example:</p>"},{"location":"cs/lisp/scheme/#lambda","title":"Lambda","text":"<p>Lambda function is the meat of Scheme. It is used to create anonymous functions.</p> <p>Syntax: <code>(lambda (&lt;param1&gt; &lt;param2&gt; ...) &lt;body&gt;)</code></p> <pre><code>scm&gt; (lambda (x y) (+ x y))\n#&lt;procedure&gt;\nscm&gt; ((lambda (x y) (+ x y)) 1 2)\n3\n</code></pre>"},{"location":"cs/lisp/scheme/#define","title":"Define","text":"<p>Use <code>(define &lt;name&gt; &lt;value&gt;)</code> to define a variable.</p> <p>Use <code>(define (&lt;name&gt; &lt;param1&gt; &lt;param2&gt; ...) &lt;body&gt;)</code> to define a procedure. It is equivalent to <code>(define &lt;name&gt; (lambda (&lt;param1&gt; &lt;param2&gt; ...) &lt;body&gt;))</code>.</p> <pre><code>scm&gt; (define x 1)\nscm&gt; x\n1\nscm&gt; (define (add x y) (+ x y))\nscm&gt; (add 1 2)\n3\nscm&gt; (define add-lambda (lambda (x y) (+ x y)))\nscm&gt; (add-lambda 1 2)\n3\n</code></pre>"},{"location":"cs/lisp/scheme/#if","title":"If","text":"<p>Syntax: <code>(if &lt;condition&gt; &lt;consequent&gt; &lt;alternative&gt;)</code></p> <pre><code>(define x 10)\n(if (odd? x)\n(print \"x is odd\")\n(print \"x is even\"))\n; \"x is even\"\n</code></pre>"},{"location":"cs/lisp/scheme/#cond","title":"Cond","text":"<p>Cond is a multi-way if statement.</p> <p>Syntax: <code>(cond (&lt;condition1&gt; &lt;consequent1&gt;) (&lt;condition2&gt; &lt;consequent2&gt;) ... [(else &lt;alternative&gt;)])</code></p> <pre><code>scm&gt; (define x 10)\nscm&gt; (cond\n((&lt; x 0) -1)\n((= x 0) 0)\n(else 1))\n1\n</code></pre>"},{"location":"cs/lisp/scheme/#and-or","title":"And &amp; Or","text":"<p><code>and</code> and <code>or</code> are used to combine multiple conditions. They are short-circuit.</p> <pre><code>scm&gt; (and\n(zero? 1)\n(/ 1 0))   ; Won't be evaluated\n#f\nscm&gt; (or\n(zero? 0)\n(/ 1 0))   ; Also won't be evaluated\n#t\n</code></pre> <p>Even though running <code>(/ 1 0)</code> alone will cause <code>DivisionByZero</code> error, In the example above it won't be evaluated since <code>and</code> and <code>or</code> are short-circuit.</p>"},{"location":"cs/lisp/scheme/#quotation","title":"Quotation","text":"<p>Quotation is used to prevent evaluation of an expression. There are two types of quotations:</p> <ul> <li> <p>Quote: <code>(quote &lt;expression&gt;)</code> or <code>'(&lt;expression&gt;)</code>.</p> </li> <li> <p>Quasiquote: <code>(quasiquote &lt;expression&gt;)</code> or <code>`(&lt;expression&gt;)</code>.</p> </li> </ul> <p>Inside a quasiquote, use <code>unquote</code> or <code>,</code> to unquote (evaluate) an expression.</p> <pre><code>scm&gt; (quote (+ 1 2))        ; (+ 1 2) will not be evaluated\n(+ 1 2)\nscm&gt; '(zero? 2)             ; Equivalent to (quote (zero? 2))\n(zero? 2)\nscm&gt; `(1 (+ 1 1) ,(+ 1 2))  ; (+ 1 1) won't be evaluated, but (+ 1 2) will\n(1 (+ 1 1) 3)\n</code></pre>"},{"location":"cs/lisp/scheme/#list","title":"List","text":"<pre><code>scm&gt; (list 1 2 3)\n(1 2 3)\nscm&gt; '(1 2 3)       ; Use quote to create a list\n(1 2 3)\nscm&gt; (define lst '(1 2 3))\nscm&gt; (cons 4 lst)   ; CONStruct a list with `4` as the first element and `lst` as the rest\n(4 1 2 3)\nscm&gt; (cons 0 nil)   ; `nil` is the built-in empty list\n(0)\nscm&gt; (car lst)      ; `car` returns the first element of a list\n1\nscm&gt; (cdr lst)      ; `cdr` returns the rest of a list\n(2 3)\n</code></pre> <p><code>car</code> is short for Contents of Address Register, and <code>cdr</code> is short for Contents of Decrement Register.</p> <p>Scheme code itself is a list. So here comes some magic:</p> <pre><code>scm&gt; (list + 1 2)   ; `+` as a primitive procedure will be calculated\n(#[+] 1 2)\nscm&gt; (list '+ 1 2)  ; `+` must be quoted to prevent evaluation\n(+ 1 2)\nscm&gt; (eval (list '+ 1 2))\n3\nscm&gt; (eval '(+ 1 2))\n3\n</code></pre>"},{"location":"cs/lisp/scheme/#eq-equal","title":"<code>=</code>, <code>eq?</code> &amp; <code>equal?</code>","text":"<p><code>=</code> can only be used to compare numbers.</p> <p>For <code>(eq? &lt;a&gt; &lt;b&gt;)</code>.</p> <ul> <li>If <code>a</code> and <code>b</code> are both numbers, booleans, symbols, or strings, return true if they are equivalent; false otherwise.</li> <li>Otherwise, return true if <code>a</code> and <code>b</code> both refer to the same object in memory; false otherwise.</li> </ul> <p>It behaves like <code>is</code> in python.</p> <pre><code>scm&gt; (eq? '(1 2 3) '(1 2 3))\n#f\nscm&gt; (define x '(1 2 3))\nscm&gt; (eq? x x)\n#t\n</code></pre> <p><code>(equal? &lt;a&gt; &lt;b&gt;)</code> returns true if <code>a</code> and <code>b</code> are equivalent. For two pairs, they are equivalent if their <code>car</code>s are equivalent and their <code>cdr</code>s are equivalent.</p> <pre><code>scm&gt; (equal? '(1 2 3) '(1 2 3))\n#t\n</code></pre>"},{"location":"cs/lisp/scheme/#streams","title":"Streams","text":"<p>Streams are lazy lists. They are evaluated only when needed.</p> <p>Under Construction</p>"},{"location":"cs/py/cs61a/","title":"CS61A: Structure and Interpretation of Computer Programs","text":"<p>\ud83d\udcd6 COURSE-STARTED-AT: 2023-11-14</p> <p>\ud83d\udd2e COURSE-FINISHED-AT: Nope, haven't finished yet.</p> <p>\ud83d\udd17 COURSE-SITE: inst.eecs.berkeley.edu/~cs61a/su20</p>"},{"location":"cs/py/cs61a/#higher-order-functions","title":"Higher-Order Functions","text":""},{"location":"cs/py/cs61a/#hw-02-q4-church-numerals","title":"HW 02 Q4: Church numerals","text":"<p>The homework HW 02 Q4: Church numerals introduced a very interesting concept called Church numerals. I'd like to note it down.</p> <p>The logician Alonzo Church invented a system of representing non-negative integers entirely using functions. The purpose was to show that functions are sufficient to describe all of number theory: if we have functions, we do not need to assume that numbers exist, but instead we can invent them.</p> <p>Using \\(\\lambda\\)-functions in python, we have the following definitions:</p> <pre><code>def zero(f):\nreturn lambda x: x\ndef successor(n): # n is a church numeral\nreturn lambda f: lambda x: f(n(f)(x))\n</code></pre> <p>Both <code>zero(f)</code> and <code>successor(n)</code> are higher-order functions, they take functions as arguments and return functions as results.</p> <p>The <code>successor(n)</code> function may look scary, but it's actually pretty straight-forward. <code>n</code> is a function that takes <code>f</code> in and returns another function that takes <code>x</code> in. So <code>n</code> is technically the same as <code>lambda f: lambda x: n(f)(x)</code>. What <code>successor(n)</code> does is just to wrap another layer of <code>f</code> to <code>n</code>.</p> <p>From the explanation above, we see that the number of <code>f</code>s is simply the corresponding integer. Rather than defining <code>one(f)</code> as <code>successor(zero)</code> and <code>two(f)</code> as <code>successor(one)</code>, we can also use:</p> <pre><code>def one(f):\nreturn lambda x: f(x)\ndef two(f):\nreturn lambda x: f(f(x))\n</code></pre> <p>Then it's easy to implement <code>church_to_int(n)</code> function:</p> <pre><code>def church_to_int(n):\nreturn n(lambda x: x + 1)(0)\n</code></pre> <p>Let's examine how to add two Church numerals together. For example, by adding <code>two(f)(x) = f(f(x))</code> and <code>one(f)(x) = f(x)</code> together, we should get <code>three(f)(x) = f(f(f(x)))</code>. The answer is to take <code>one</code> and plug it into <code>x</code> of <code>two(f)(x)</code>: <code>two(f)(one(f)(x))</code>. The code would be:</p> <pre><code>def add_church(m, n):\nreturn lambda f: lambda x: m(f)(n(f)(x))\n</code></pre> <p>Then we try multiplication. The idea is to plug <code>n</code> into <code>f</code> of <code>m(f)(x)</code>.</p> <pre><code>def mul_church(m, n):\nreturn lambda f: lambda x: m(n(f))(x)\n</code></pre> <p>The most challenging task is to implement power.</p> <pre><code>def pow_church(m, n):\nreturn lambda f: lambda x: n(m)(f)(x)\n</code></pre> <p>You can verify this by plugging in some numbers.</p>"},{"location":"cs/py/cs61a/#hw-03-q6-anonymous-factorial","title":"HW 03 Q6: Anonymous factorial","text":"<p>Another interesting quiz I found is HW 03 Q6: Anonymous factorial.</p> <p>The recursive factorial function can be written as a single expression by using a conditional expression.</p> <pre><code>fact = lambda n: 1 if n == 1 else n * fact(n - 1)\n</code></pre> <p>Note that this implementation relies on the fact that <code>fact</code> has a name. Is there a way to define <code>fact</code> recursively without giving it a name?</p> <p>The task is to implement an anonymous function that computes the factorial of <code>n</code> using only call expressions, conditional expressions, and lambda expressions (no assignment or def statements). You may also use <code>-</code> and <code>*</code> operators.</p> <p>How the non-anonymous factorial function works is that inside each layer of recursion, the function <code>fact</code> itself can always be called. Thus, we come up with the idea to pass the function itself as an argument to the function.</p> <pre><code>def fact(f, n):\nreturn 1 if n == 1 else n * f(f, n - 1)\nfact(fact, 5) # 120\n</code></pre> <p>So the answer would be:</p> <pre><code>fact = (lambda f: lambda x: f(f, x))(lambda f, x: 1 if x == 1 else x * f(f, x - 1))\n</code></pre> <p>The logic behind this quiz is something called Y Combinator. Y Combinator is a method to turn a non-anonymous recursive function into an anonymous one. Here's one example (by GitHub Copilot):</p> <pre><code>def Y(f):\nreturn (lambda x: f(lambda y: x(x)(y)))(lambda x: f(lambda y: x(x)(y)))\nfact = Y(lambda f: lambda n: 1 if n == 0 else n * f(n - 1))\nfact(5)  # 120\n</code></pre> <p>I won't dig into Y Combinator here. (Maybe elsewhere)</p>"},{"location":"cs/py/cs61a/#data-abstraction","title":"Data Abstraction","text":"<p>The way to implement data abstraction in python is way easier than in C++. Here's an example to construct a tree (which is actually nested lists):</p> <pre><code>def tree(label, branches = []):\nfor branch in branches:\nassert is_tree(branch)\nreturn [label] + list(branches)\ndef label(tree):\nreturn tree[0]\ndef branches(tree):\nreturn tree[1:]\ndef is_tree(tree):\nif type(tree) != list or len(tree) &lt; 1:\nreturn False\nfor branch in branches(tree):\nif not is_tree(branch):\nreturn False\nreturn True\ndef is_leaf(tree):\nreturn not branches(tree)\n</code></pre> <p>To construct a Fibonacci tree, we simply use:</p> <pre><code>def fib_tree(n):\nif n == 0 or n == 1:\nreturn tree(n)\nleft = fib_tree(n - 2)\nright = fib_tree(n - 1)\nfib_n = label(left) + label(right)\nreturn tree(fib_n, [left, right])\n</code></pre> <p>That's it. A newly-baked Fibonacci tree, in a few lines. (I'm lovin' python)</p>"},{"location":"cs/py/cs61a/#mutation","title":"Mutation","text":"<p>Here's a piece of code, pay attention how <code>a</code> behaves.</p> <pre><code>&gt;&gt;&gt; a = [1, 2]\n&gt;&gt;&gt; b = a\n&gt;&gt;&gt; b.append(3)\n&gt;&gt;&gt; b\n[1, 2, 3]\n&gt;&gt;&gt; a\n[1, 2, 3]\n</code></pre> <p>You may expect <code>a</code> to be <code>[1, 2]</code>, but it's not. The reason is that <code>a</code> and <code>b</code> are both names that refer to the same object. When we call <code>b.append(3)</code>, we are actually mutating the object that <code>a</code> refers to. Thus, <code>a</code> is also changed.</p> <p>Using mutations, we can do some magic:</p> <pre><code>&gt;&gt;&gt; def magic(x):\n...     x[0] = 1\n...\n&gt;&gt;&gt; a = [0, 2]\n&gt;&gt;&gt; magic(a)\n&gt;&gt;&gt; a\n[1, 2]\n</code></pre> <p>The <code>magic</code> function above behaves pretty C-ish, compare it with the following C code:</p> <pre><code>void magic(int x[]) {\nx[0] = 1;\n}\nint main() {\nint a[] = {0, 2};\nmagic(a);\nprintf(\"{%d, %d}\", a[0], a[1]); // {1, 2}\n}\n</code></pre> <p>In python, types are classified into two categories:</p> <ul> <li>Mutable types: <code>list</code>, <code>dict</code>, <code>set</code>, <code>bytearray</code>, etc.</li> <li>Immutable types: <code>int</code>, <code>float</code>, <code>bool</code>, <code>str</code>, <code>tuple</code>, <code>frozenset</code>, <code>bytes</code>, etc.</li> </ul> <p>Note that <code>tuple</code> is immutable, but it can contain mutable objects.</p> <pre><code>&gt;&gt;&gt; a = ([], 2)\n&gt;&gt;&gt; b = a\n&gt;&gt;&gt; a[0].append(1)\n&gt;&gt;&gt; a\n([1], 2)\n&gt;&gt;&gt; b\n([1], 2)\n</code></pre> <p><code>is</code> operator can be used to check whether two names refer to the same object. And <code>==</code> checks whether two objects are equal.</p> <pre><code>&gt;&gt;&gt; a = [1, 2, 3]\n&gt;&gt;&gt; b = [1, 2, 3]\n&gt;&gt;&gt; c = a\n&gt;&gt;&gt; a == b  # True\n&gt;&gt;&gt; a == c  # True\n&gt;&gt;&gt; a is b  # False\n&gt;&gt;&gt; a is c  # True\n</code></pre> <p>In this case, <code>a</code> and <code>b</code> are two different objects that happened to hold the same value, while <code>a</code> and <code>c</code> are literally the same object.</p> <p>Mutable objects can be used as dictionary keys, but immutable objects cannot.</p> <pre><code>&gt;&gt;&gt; a = {[1, 2]: 0}  # TypeError: unhashable type: 'list'\n&gt;&gt;&gt; a = {(1, 2): 0}  # No error\n</code></pre> <p>Mutable default arguments are dangerous. Consider the following code:</p> <pre><code>&gt;&gt;&gt; def f(x = []):\n...     x.append(0)\n...     return x\n...\n&gt;&gt;&gt; f()\n[0]\n&gt;&gt;&gt; f()\n[0, 0]\n&gt;&gt;&gt; f()\n[0, 0, 0]\n</code></pre> <p>The default argument <code>x = []</code> is evaluated only once, when the function is defined. Thus, every time we call <code>f()</code>, we are actually appending <code>0</code> to the same list.</p>"},{"location":"cs/py/cs61a/#nonlocal","title":"Nonlocal","text":"<p>The <code>nonlocal</code> statement is used to indicate that a variable is defined in the parent's local scope. Consider the following code:</p> <pre><code>&gt;&gt;&gt; n = 1\n&gt;&gt;&gt; def f():\n...     n += 1\n...     return n\n...\n&gt;&gt;&gt; f()  # UnboundLocalError\n</code></pre> <p>The error is caused by the fact that <code>n</code> is not defined in the local scope of <code>f</code>. To fix this, we use <code>nonlocal</code>:</p> <pre><code>&gt;&gt;&gt; n = 1\n&gt;&gt;&gt; def f():\n...     nonlocal n\n...     n += 1\n...     return n\n...\n&gt;&gt;&gt; f()\n&gt;&gt;&gt; n\n2\n</code></pre> <p>Such statement is very useful for implementing closures.</p> <pre><code>&gt;&gt;&gt; def make_inc(n):\n...     def inc(k):\n...         nonlocal n\n...         n += k\n...         return n\n...     return inc\n...\n&gt;&gt;&gt; inc = make_inc(0)\n&gt;&gt;&gt; inc(10)\n10\n&gt;&gt;&gt; inc(10)\n20\n&gt;&gt;&gt; inc(10)\n30\n</code></pre>"},{"location":"cs/py/cs61a/#iterators-generators","title":"Iterators &amp; Generators","text":""},{"location":"cs/py/cs61a/#iterators","title":"Iterators","text":"<p><code>iter</code> function takes an iterable object and returns an iterator. <code>next</code> function takes an iterator and returns the next item in the iterable object. When there's no more item, <code>next</code> raises a <code>StopIteration</code> exception.</p> <pre><code>&gt;&gt;&gt; t = iter([1, 2])\n&gt;&gt;&gt; s = t\n&gt;&gt;&gt; next(t)\n1\n&gt;&gt;&gt; next(s)  # Iterators are mutable. \n2\n&gt;&gt;&gt; next(t)  # StopIteration\n</code></pre> <p>Some built-in functions like <code>map</code>, <code>filter</code>, <code>zip</code> return iterators.</p> <pre><code>&gt;&gt;&gt; t = map(lambda x: x ** 2, [1, 2, 3])\n&gt;&gt;&gt; next(t)\n1\n&gt;&gt;&gt; next(t)\n4\n&gt;&gt;&gt; next(t)\n9\n&gt;&gt;&gt; next(t)  # StopIteration\n</code></pre> <p>Note that such functions are lazy, they don't compute the whole list at once. Instead, they compute the next item only when it's needed.</p> <pre><code>&gt;&gt;&gt; def check(x):\n...     print(\"Checking\", x)\n...     return x * x &gt;= 10\n...\n&gt;&gt;&gt; t = filter(check, range(6))  # No output yet\n&gt;&gt;&gt; next(t)\nChecking 0\nChecking 1\nChecking 2\nChecking 3\nChecking 4\n4\n&gt;&gt;&gt; next(t)\nChecking 5\n5\n&gt;&gt;&gt; next(t)  # StopIteration\n</code></pre>"},{"location":"cs/py/cs61a/#generators","title":"Generators","text":"<p>A generator is a function that returns an iterator. It looks like a normal function, but it contains <code>yield</code> statements.</p> <pre><code>&gt;&gt;&gt; def naturals():\n...     n = 0\n...     while True:\n...         yield n\n...         n += 1\n...\n&gt;&gt;&gt; t = naturals()\n&gt;&gt;&gt; next(t)\n0\n&gt;&gt;&gt; next(t)\n1\n&gt;&gt;&gt; next(t)\n2\n</code></pre> <p>Generators are also lazy. This is why <code>naturals</code> doesn't run into an infinite loop.</p> <p><code>yield from</code> is another special syntax that allows a generator to yield all values from another generator. You can consider it a syntax sugar for nested loops. For example,</p> <pre><code>yield from t\n</code></pre> <p>is equivalent to:</p> <pre><code>for x in t:\nyield x\n</code></pre>"},{"location":"cs/py/cs61a/#hw-05-q6-remainder-generator","title":"HW 05 Q6: Remainder Generator","text":"<p>The homework HW 05 Q6: Remainder Generator asks us to implement <code>remainders_generator</code>. This is an easy task but it helps to understand iterators and generators.</p> <p><code>remainders_generator</code> takes in an integer <code>m</code>, and yields <code>m</code> different generators. The first generator is a generator of multiples of <code>m</code>, i.e. numbers where the remainder is 0. The second is a generator of natural numbers with remainder 1 when divided by <code>m</code>. The last generator yields natural numbers with remainder <code>m - 1</code> when divided by <code>m</code>.</p> <p>In short, <code>remainders_generator</code> yields all the congruence classes of <code>m</code>.</p> <p>For instance, <code>remainders_generator(4)</code> should yield:</p> <pre><code>&gt;&gt;&gt; for r in remainders_generator(4):\n...     print([next(r) for _ in range(5)])\n... \n[4, 8, 12, 16, 20]\n[1, 5, 9, 13, 17]\n[2, 6, 10, 14, 18]\n[3, 7, 11, 15, 19]\n</code></pre> <p>Here is my implementation:</p> <pre><code>def remainders_generator(m):\ndef remainder(r):\nif r == 0: r += m\nwhile True:\nyield r\nr += m\nfor r in range(m):\nyield remainder(r)\n</code></pre>"},{"location":"cs/py/cs61a/#scheme","title":"Scheme","text":"<p>Scheme is a dialect of Lisp. For the syntax and language features, refer to Scheme notes.</p> <p>The task is to build a Scheme interpreter, in python.</p>"},{"location":"cs/sys/csapp/","title":"CSAPP Notes","text":"<p>CSAPP stands for Computer Systems: A Programmer's Perspective.</p> <p>Be aware that the notes here are not linearly organized. And this should not be a substitute for the book.</p>"},{"location":"cs/sys/csapp/#12-programs-are-translated-by-other-programs-into-different-forms","title":"1.2 Programs Are Translated by Other Programs into Different Forms","text":""},{"location":"cs/sys/csapp/#compilation-system","title":"Compilation System","text":"<p>For a typical C program <code>hello.c</code>:</p> <pre><code>#include&lt;stdio.h&gt;\nint main() {\nprintf(\"hello, world\\n\");\nreturn 0;\n}\n</code></pre> <p>When running</p> <pre><code>gcc -o hello hello.c\n</code></pre> <p>Four phases are performed:</p> <p></p> <ul> <li>Preprocessing phase: The preprocessor (<code>cpp</code>) turns <code>hello.c</code> to <code>hello.i</code>. The result <code>hello.i</code> is also a C program. In this phase, <code>#include&lt;stdio.h&gt;</code> is replaced by the content of <code>stdio.h</code>.</li> <li>Compilation phase: The compiler (<code>cc1</code>) translates text file <code>hello.i</code> into text file <code>hello.s</code>, which contains an assembly-language program.</li> <li>Assembly phase: The assembler (<code>as</code>) translates <code>hello.s</code> into machine-language instructions, packages them in a form known as a relocatable object program, and stores the result in the object file <code>hello.o</code>.</li> <li>Linking phase. Take <code>printf</code> function for example. The <code>printf</code> function resides in a separate precompiled object file called <code>printf.o</code>, which must be merged with <code>hello.o</code>. The linker (<code>ld</code>) handles this merging. The result is the executable object file <code>hello</code>.</li> </ul>"},{"location":"cs/sys/csapp/#14-processors-read-and-interpret-instructions-stored-in-memory","title":"1.4 Processors Read and Interpret Instructions Stored in Memory","text":""},{"location":"cs/sys/csapp/#hardware-organization-of-a-system","title":"Hardware Organization of a System","text":"<ul> <li>Word: The natural unit of access for a processor. A word is typically 4 bytes or 8 bytes long. A bus transfers a word at a time.</li> <li>I/O Devices :: Controller / Adapter: Controllers are chip set in the device itself or on the motherboard. An adapter is a card that plugs into a slot on the motherboard.</li> <li>CPU :: PC / ALU: PC stands for program counter, ALU stands for arithmetic/logic unit.</li> </ul>"},{"location":"cs/sys/csapp/#16-storage-devices-form-a-hierarchy","title":"1.6 Storage Devices Form a Hierarchy","text":"<p>This notion of inserting a smaller, faster storage device (e.g., cache memory) between the processor and a larger, slower device (e.g., main memory) turns out to be a general idea.</p> <p>Memory hierarchy:</p> <p></p>"},{"location":"cs/sys/csapp/#17-the-operating-system-manages-the-hardware","title":"1.7 The Operating System Manages the Hardware","text":"<p>The operating system manages the hardware by providing abstractions for the hardware resources.</p> <p></p> <ul> <li>File: I/O devices.</li> <li>Virtual memory: Main memory and I/O devices.</li> <li>Processes: The processor, main memory, and I/O devices.</li> </ul>"},{"location":"cs/sys/csapp/#processes","title":"Processes","text":"<p>When a program such as <code>hello</code> runs on a modern system, the operating system provides the illusion that the program is the only one running on the system. The program appears to have exclusive use of both the processor, main memory, and I/O devices. The processor appears to execute the instructions in the program, one after the other, without interruption. And the code and data of the program appear to be the only objects in the system\u2019s memory. These illusions are provided by the notion of a process, one of the most important and successful ideas in computer science.</p> <p>Multiple processes run concurrently on a system.</p> <p>Kernel: The kernel is the portion of the operating system code that is always resident in memory. When an application program requires some action by the operating system, such as to read or write a file, it executes a special system call instruction, transferring control to the kernel. The kernel then performs the requested operation and returns to the application program.</p>"},{"location":"cs/sys/csapp/#threads","title":"Threads","text":"<p>Multiple threads run concurrently within a process.</p> <p>They share the same code and global data.</p>"},{"location":"cs/sys/csapp/#virtual-memory","title":"Virtual Memory","text":"<p>An abstraction that provides each process with the illusion that it has exclusive use of the main memory.</p>"},{"location":"cs/sys/csapp/#files","title":"Files","text":"<p>Every I/O device, e.g., disks, keyboards, and monitors, is modeled as a file.</p>"},{"location":"cs/sys/csapp/#19-important-themes","title":"1.9 Important Themes","text":""},{"location":"cs/sys/csapp/#amdahls-law","title":"Amdahl's Law","text":"<p>Consider a system in which executing some application requires time \\(T_{\\text{old}}\\). Suppose some part of the system requires a fraction \\(\\alpha\\) of this time, and that we improve its performance by a factor of \\(k\\). The overall execution time would thus be</p> \\[ \\begin{aligned} T_{\\text{new}}=&amp;(1-\\alpha)T_{\\text{old}} + \\alpha T_{\\text{old}}/k\\\\ =&amp;T_{\\text{old}}[(1-\\alpha) + \\alpha/k] \\end{aligned} \\] <p>The speedup \\(S = T_{\\text{old}} / T_{\\text{new}}\\) is</p> \\[S=\\frac{1}{(1-\\alpha) + \\alpha/k}\\] <p>Suppose we significantly improved a part that takes \\(60%\\) of the time by a factor of \\(3\\). The speedup is only \\(1.67\\times\\). The overall improvement is not as good as we expected.</p> <p>Furthermore, suppose we are able to take some part of the system and speed it up to the point at which it takes a negligible amount of time. That is, we set \\(k\\) to \\(\\infty\\). The speedup is</p> \\[S_\\infty=\\frac{1}{1-\\alpha}\\] <p>When we set \\(\\alpha\\) to \\(60\\%\\), the speedup is only \\(2.5\\times\\).</p> <p>Conclude: To significantly improve the overall performance of a system, we must improve the speed of a very large fraction of the system.</p>"},{"location":"math/la/prove-that/","title":"Prove That...","text":"<p>C'mon, prove these linear algebra things!</p> <p>For the content below, I use \\(W\\leqslant V\\) to denote \\(W\\) is a subspace of \\(V\\), and \\(\\exists!\\) to denote \"there exists a unique\".</p>"},{"location":"math/la/prove-that/#group-ring-field","title":"Group, Ring &amp; Field","text":"<ol> <li>\\(\\mathbb{Q}(\\sqrt{2}) = \\{a+b\\sqrt{2}\\mid a,b\\in\\mathbb{Q}\\}\\) is a field.</li> <li>\\(\\mathbb{Q}\\) is the smallest number field (i.e. subfield of \\(\\mathbb{C}\\)).</li> </ol>"},{"location":"math/la/prove-that/#linear-space","title":"Linear Space","text":"<ol> <li>For \\(W\\subset V(\\mathbf{F})\\), \\(W\\leqslant V\\iff W\\) is closed under addition and scalar multiplication.</li> <li>\\(S_1\\subset S_2\\subset V(\\mathbf{F})\\Rightarrow\\operatorname{span}S_1\\subset\\operatorname{span}S_2\\).</li> <li>If \\(S_1\\) and \\(S_2\\) are linearly independent, then \\(\\operatorname{span}S_1=\\operatorname{span}S_2\\Rightarrow|S_1|=|S_2|\\).</li> <li>Functions \\(\\exp(\\lambda_1x)\\), \\(\\exp(\\lambda_2x)\\) and \\(\\exp(\\lambda_3x)\\) are linearly independent. (\\(\\lambda_1\\), \\(\\lambda_2\\) and \\(\\lambda_3\\) are distinct)</li> <li>For \\(W_1, W_2\\leqslant V(\\mathbf{F})\\):<ol> <li>\\(W_1\\cup W_2\\leqslant V\\iff W_1\\subset W_2\\) or \\(W_2\\subset W_1\\).</li> <li>\\(W_1 + W_2 = \\operatorname{span}(W_1\\cup W_2)\\).</li> <li>\\(\\dim(W_1 + W_2) = \\dim W_1 + \\dim W_2 - \\dim(W_1\\cap W_2)\\).</li> </ol> </li> <li>For \\(W_1, W_2\\leqslant V(\\mathbf{F})\\), the following propositions are equivalent:<ol> <li>\\(W_1 \\cap W_2 = \\{0\\}\\).</li> <li>\\(\\forall\\alpha\\in W_1 + W_2\\), \\(\\exists!\\alpha_1\\in W_1\\) and \\(\\exists!\\alpha_2\\in W_2\\) such that \\(\\alpha = \\alpha_1 + \\alpha_2\\).</li> <li>If \\(0 = \\alpha_1 + \\alpha_2 (\\alpha_1 \\in W_1, \\alpha_2 \\in W_2)\\), then \\(\\alpha_1 = \\alpha_2 = 0\\).</li> <li>\\(\\dim(W_1 + W_2) = \\dim W_1 + \\dim W_2\\).</li> </ol> </li> </ol>"},{"location":"math/la/prove-that/#inner-product-space","title":"Inner Product Space","text":"<ol> <li>(Cauchy\u2013Schwarz inequality) \\(|\\langle\\alpha,\\beta\\rangle|\\leq \\|\\alpha\\|\\cdot\\|\\beta\\|\\).</li> <li>(Triangle inequality) \\(\\|\\alpha\\|+\\|\\beta\\| \\geq \\|\\alpha+\\beta\\|\\).</li> <li>(Pythagorean theorem) \\(\\|\\alpha\\|^2+\\|\\beta\\|^2 = \\|\\alpha+\\beta\\|^2\\iff\\alpha\\perp\\beta\\iff\\angle(\\alpha,\\beta)=\\dfrac{\\pi}{2}\\).</li> <li>(Gram\u2013Schmidt process) Any Euclidean space has an orthonormal basis. (The method to construct it is called Gram\u2013Schmidt process.)</li> <li>If \\(B = \\{\\varepsilon_1, \\varepsilon_2, \\cdots, \\varepsilon_n\\}\\) is an orthonormal basis of \\(V(\\mathbf{F})\\), then \\(\\forall\\alpha\\in V\\), \\(\\alpha = \\sum\\limits_{i=1}^n\\langle\\alpha,\\varepsilon_i\\rangle\\cdot\\varepsilon_i\\).</li> </ol>"},{"location":"math/la/prove-that/#linear-transformation","title":"Linear Transformation","text":"<ol> <li>\\(\\sigma:V\\to W\\) is injective \\(\\iff\\ker\\sigma = \\{0\\}\\).</li> <li>\\(\\sigma:V\\to W\\) is surjective \\(\\iff\\operatorname{im}\\sigma = W\\).</li> <li>If \\(B=\\{\\alpha_1,\\alpha_2,\\dots,\\alpha_n\\}\\) is a basis of \\(V\\), then \\(\\forall \\beta_1, \\beta_2, \\dots, \\beta_n\\in W\\), \\(\\exists !\\sigma:V \\to W\\) such that \\(\\sigma(\\alpha_i) = \\beta_i\\).</li> <li>For \\(\\sigma: V \\to W\\), \\(\\operatorname{rank}\\sigma + \\dim\\ker\\sigma = \\dim V\\).</li> <li>For \\(\\sigma: V \\to W\\), if \\(\\dim V = \\dim W = n\\), the following propositions are equivalent:<ol> <li>\\(\\sigma\\) is injective.</li> <li>\\(\\sigma\\) is surjective.</li> <li>\\(\\operatorname{rank}\\sigma = n\\).</li> </ol> </li> <li>\\(V\\cong W \\iff \\dim V = \\dim W\\).</li> </ol>"},{"location":"math/la/prove-that/#matrix","title":"Matrix","text":"<ol> <li>\\(\\mathbf{M}(\\sigma)\\) and \\(\\sigma\\) are one-to-one.</li> <li>Prove with matrix: if \\(\\dim V(\\mathbf{F})=m\\), \\(\\dim W(\\mathbf{F})=n\\), then \\(\\mathcal{L}(V, W)\\cong \\mathbf{F}^{m\\times n}\\).</li> <li>Prove with matrix: \\(\\dim\\mathcal{L}(V, W)=\\dim V\\cdot\\dim W\\).</li> </ol>"},{"location":"math/la/what-is/","title":"What is...","text":"<p>Here are some easy-to-forget terms in linear algebra. Check whether you are familiar with them all.</p>"},{"location":"math/la/what-is/#set","title":"Set","text":"<ol> <li>Power set, or \\(P(A)\\) and \\(2^A\\) for a set \\(A\\).</li> </ol>"},{"location":"math/la/what-is/#group-and-field","title":"Group and Field","text":"<ol> <li>Semigroup.</li> <li>Monoid.</li> <li>Group, or \\(\\langle G:\\circ\\rangle\\).</li> <li>Abelian group.</li> <li>Field, or \\(\\langle F:+, \\circ\\rangle\\).</li> </ol>"},{"location":"math/la/what-is/#vector-space","title":"Vector Space","text":"<ol> <li>Dimension, or \\(\\dim V\\).</li> <li>Rank, or \\(\\operatorname{rank} A\\).</li> <li>For \\(W_1, W_2\\leq V(\\mathbf{F})\\), what is \\(W_1+W_2\\), \\(W_1\\oplus W_2\\).</li> <li>Inner product space.</li> <li>Euclidean space.</li> <li>Schmidt orthonormalization.</li> </ol>"},{"location":"math/ma/cheatsheet/","title":"Mathematical Analysis Cheatsheet","text":"<p>Disclaimer: By saying \"cheatsheet\" I don't mean something used for cheating, but rather a quick reference for the most important concepts and formulas. I don't encourage cheating in any way.</p>"},{"location":"math/ma/cheatsheet/#equivalent-infinitesimals","title":"Equivalent Infinitesimals","text":"<p>When \\(x\\to0\\):</p> <ul> <li>\\(\\sin x\\sim \\tan x\\sim\\arcsin x\\sim\\arctan x\\sim x\\)</li> <li>\\(1 - \\cos x \\sim \\dfrac{1}{2} x ^ 2\\)</li> <li>\\(\\ln(1 + x) \\sim e^x - 1 \\sim x\\)</li> <li>\\((1 + x) ^ a - 1 \\sim ax\\)</li> </ul>"},{"location":"math/ma/cheatsheet/#derivatives","title":"Derivatives","text":"<ul> <li>\\((\\tan x)' = \\sec ^ 2 x \\longleftrightarrow (\\cot x)' = - \\csc ^ 2 x\\)</li> <li>\\((\\sec x)' = \\sec x \\tan x \\longleftrightarrow (\\csc x)' = - \\csc x \\cot x\\)</li> <li>\\((\\arcsin x)' = \\dfrac{1}{\\sqrt{1 - x ^ 2}} \\longleftrightarrow (\\arccos x)' = - \\dfrac{1}{\\sqrt{1 - x ^ 2}}\\)</li> <li>\\((\\arctan x)' = \\dfrac{1}{1 + x ^ 2} \\longleftrightarrow (\\operatorname{arccot} x)' = - \\dfrac{1}{1 + x ^ 2}\\)</li> </ul>"},{"location":"math/ma/cheatsheet/#taylor-series","title":"Taylor Series","text":"<p>With \\(\\theta\\in(0, 1)\\) and \\(\\xi = x_0 + \\theta(x - x_0)\\):</p> <ul> <li>\\(f(x) = f(x_0) + f'(x_0)(x-x_0) + \\cdots + \\dfrac{f^{(n)}(x_0)}{n!}(x-x_0)^n + \\dfrac{f^{(n+1)}(\\xi)}{(n+1)!}(x-x_0)^{n+1}\\)</li> <li>\\(e^x = 1 + x + \\dfrac{x^2}{2!} + \\dfrac{x^3}{3!} + \\cdots + \\dfrac{x^n}{n!} + \\dfrac{e^{\\theta x}}{(n+1)!}x^{n+1}\\)</li> <li>\\(\\sin x = x - \\dfrac{x^3}{3!} + \\dfrac{x^5}{5!} - \\cdots + (-1)^n\\dfrac{x^{2n+1}}{(2n+1)!} + (-1)^{n+1}\\dfrac{\\cos\\theta x}{(2n+3)!}x^{2n+3}\\)</li> <li>\\(\\cos x = 1 - \\dfrac{x^2}{2!} + \\dfrac{x^4}{4!} - \\cdots + (-1)^n\\dfrac{x^{2n}}{(2n)!} + (-1)^{n+1}\\dfrac{\\sin\\theta x}{(2n+2)!}x^{2n+2}\\)</li> <li>\\(\\ln(1 + x) = x - \\dfrac{x^2}{2} + \\dfrac{x^3}{3} - \\cdots + (-1)^{n-1}\\dfrac{x^n}{n} + o(x^n)\\)</li> <li>\\((1+x)^\\alpha = \\dbinom{\\alpha}{0} + \\dbinom{\\alpha}{1}x + \\dbinom{\\alpha}{2}x^2 + \\cdots + \\dbinom{\\alpha}{n}x^n + o(x^n)\\)</li> <li>\\(\\dfrac{1}{1-x} = 1 + x + x^2 + \\cdots + x^n + o(x^n)\\)</li> <li>\\(\\arctan x = x - \\dfrac{x^3}{3} + \\dfrac{x^5}{5} + \\cdots + (-1)^n\\dfrac{x^{2n+1}}{2n+1} + o(x^{2n+1})\\)</li> <li>\\(\\arcsin x = x + \\dfrac{x^3}{6} + \\dfrac{3x^5}{40} + o(x^5)\\)</li> <li>\\(\\arccos x = \\dfrac{\\pi}{2} - \\arcsin x\\)</li> </ul>"},{"location":"math/ma/completeness-of-real-numbers/","title":"Completeness of the Real Numbers","text":""},{"location":"math/ma/completeness-of-real-numbers/#least-upper-bound-property","title":"Least upper bound property","text":"<p>Every nonempty subset of \\(\\mathbb{R}\\) having an upper bound has a least upper bound.</p>"},{"location":"math/ma/completeness-of-real-numbers/#monotone-convergence-theorem","title":"Monotone convergence theorem","text":"<p>If a sequence of \\(\\mathbb{R}\\) is monotone and bounded, then it converges.</p>"},{"location":"math/ma/completeness-of-real-numbers/#nested-interval-theorem","title":"Nested interval theorem","text":"<p>For a sequence of closed intervals \\(\\{[a_n,b_n]\\}\\), if \\([a_{n+1},b_{n+1}]\\subset[a_n,b_n]\\) for all \\(n\\in\\mathbb{N}^\\star\\) and \\(\\lim\\limits_{n\\to\\infty}{|a_n-b_n|}=0\\), then exists exactly one \\(\\xi\\in\\mathbb{R}\\) so that \\(\\xi\\in[a_n,b_n]\\) for all \\(n\\in\\mathbb{N}^\\star\\).</p>"},{"location":"math/ma/completeness-of-real-numbers/#bolzano-weierstrass-theorem","title":"Bolzano-Weierstrass theorem","text":"<p>Every bounded sequence of \\(\\mathbb{R}\\) has a convergent subsequence.</p>"},{"location":"math/ma/completeness-of-real-numbers/#cauchy-criterion","title":"Cauchy criterion","text":"<p>A sequence of \\(\\mathbb{R}\\) is convergent if and only if it is a fundamental sequence.</p> <p>Fundamental sequence: A sequence \\(\\{x_n\\}\\) is called a fundamental sequence if for all \\(\\varepsilon &gt; 0\\), exists \\(N\\in\\mathbb{N}^\\star\\) so that \\(|x_{n+p} - x_n| &lt; \\varepsilon\\) for all \\(n&gt;N\\) and \\(p\\in\\mathbb{N}^\\star\\). Fundamental sequence is also known as Cauchy sequence.</p>"},{"location":"math/ma/completeness-of-real-numbers/#heine-borel-theorem","title":"Heine-Borel theorem","text":"<p>If \\(H\\) is an infinite open cover of closed interval \\([a, b]\\), then exists a finite subset \\(H_0\\subset H\\) so that \\(H_0\\) is an open cover of \\([a,b]\\).</p> <p>Or: If \\(H = \\{(a_\\alpha, b_\\alpha) | \\alpha \\in \\Lambda\\}\\) which satisfies \\(\\bigcup\\limits_{\\alpha\\in\\Lambda}{(a_\\alpha, b_\\alpha)} \\supset [a, b]\\), then exists a finite subset \\(H_0\\subset H\\) so that \\(\\bigcup\\limits_{(a_\\alpha, b_\\alpha)\\in H_0}{(a_\\alpha, b_\\alpha)} \\supset [a, b]\\).</p>"},{"location":"math/ma/prove-that/","title":"Prove That...","text":"<p>Here are theorems and proofs that are essential in mathematical analysis. It would be nice if you could prove them smoothly.</p>"},{"location":"math/ma/prove-that/#set","title":"Set","text":"<ol> <li>(De Morgan's laws)<ul> <li>\\((A \\cup B)^C = A^C \\cap B^C\\)</li> <li>\\((A \\cap B)^C = A^C \\cup B^C\\)</li> </ul> </li> <li>Any countable union of countable sets is a countable set.</li> </ol>"},{"location":"math/ma/prove-that/#limit-of-a-sequence","title":"Limit of a sequence","text":"<ol> <li>Prove with definition: \\(\\lim\\limits_{n\\to\\infty}{\\sqrt[n]{n}} = 1\\).</li> <li>If \\(\\lim\\limits_{n\\to\\infty}{a_n} = a\\), then \\(\\lim\\limits_{n\\to\\infty}{\\dfrac{a_1+a_2+\\cdots+a_n}{n}} = a\\).</li> <li>For convergent sequences \\(\\{x_n\\}\\) and \\(\\{y_n\\}\\), if \\(\\lim\\limits_{n\\to\\infty}x_n=a\\), \\(\\lim\\limits_{n\\to\\infty}y_n=b\\), and \\(a&lt;b\\), then exists \\(N\\in\\mathbb{N}^\\star\\) so that \\(x_n&lt;y_n\\) for all \\(n&gt;N\\).</li> <li>If \\(\\lim\\limits_{n\\to\\infty}x_n=a\\), \\(\\lim\\limits_{n\\to\\infty}y_n=b\\neq0\\), then \\(\\lim\\limits_{n\\to\\infty}\\dfrac{x_n}{y_n}=\\dfrac{a}{b}\\).</li> <li>\\(a_n = \\left(1 + \\dfrac{1}{n}\\right)^n\\) and \\(b_n = \\left(1 + \\dfrac{1}{n}\\right)^{n + 1}\\) converges to \\(e\\).</li> <li>\\(a_n = 1 + \\dfrac{1}{1!} + \\dfrac{1}{2!} + \\cdots + \\dfrac{1}{n!}\\) converges to \\(e\\).</li> <li>\\(a_n = 1 + \\dfrac{1}{2} + \\dfrac{1}{3} + \\cdots + \\dfrac{1}{n} - \\ln n\\) converges to \\(\\gamma\\).</li> <li>\\(\\lim\\limits_{n\\to\\infty}a_n=A\\iff\\lim\\limits_{n\\to\\infty}a_{2n-1}=\\lim\\limits_{n\\to\\infty}a_{2n}=A\\).</li> <li>\\(\\{a_n\\}\\) is convergent \\(\\iff\\) every non-trivial subsequence \\(\\{a_{n_k}\\}\\) of \\(\\{a_n\\}\\) converges.</li> <li>\\(a_n = \\sin n\\) is divergent.</li> <li>Prove with Nested interval theorem: \\(\\mathbb{R}\\) is uncountable.</li> <li>Refer to Completeness of the Real Numbers, and prove<ol> <li>Least upper bound \\(\\Rightarrow\\) Monotone convergence.</li> <li>Monotone convergence \\(\\Rightarrow\\) Nested interval.</li> <li>Nested interval \\(\\Rightarrow\\) Bolzano-Weierstrass.</li> <li>Bolzano-Weierstrass \\(\\Rightarrow\\) Cauchy criterion.</li> <li>Cauchy criterion \\(\\Rightarrow\\) Least upper bound.</li> <li>Cauchy criterion \\(\\Rightarrow\\) Nested interval.</li> <li>Nested interval \\(\\Rightarrow\\) Least upper bound.</li> </ol> </li> </ol>"},{"location":"math/ma/prove-that/#limit-of-a-function","title":"Limit of a function","text":"<ol> <li>If \\(\\lim\\limits_{x\\to a}f(x)=A\\), \\(\\lim\\limits_{x\\to a}g(x)=B\\) and \\(A&gt;B\\), then exists \\(\\delta&gt;0\\) so that \\(f(x)&gt;g(x)\\) for all \\(x\\in\\mathring{U}(x_0, \\delta)\\).</li> <li>If \\(\\lim\\limits_{x\\to x_0}f(x)=A\\), then exists \\(\\delta&gt;0\\) so that \\(f(x)\\) is bounded in \\(\\mathring{U}(x_0, \\delta)\\).</li> <li>Prove with definition: \\(\\lim\\limits_{x\\to0}\\dfrac{\\sin x}{x} = 1\\).</li> <li>(Heine's theorem) The necessary and sufficient condition for \\(\\lim\\limits_{x\\to a}f(x)=A\\) is that for all sequences \\(\\{x_n\\}\\) which converges to \\(a\\) and \\(x_n\\neq a\\), \\(\\lim\\limits_{n\\to\\infty}f(x_n)=A\\).</li> <li>Prove with Heine's theorem: \\(f(x)=\\sin\\dfrac{1}{x}\\) has no limit as \\(x\\to0\\).</li> <li>(Cauchy criterion) Prove with Heine's theorem: \\(\\lim\\limits_{x\\to a}f(x)\\) exists if and only if for all \\(\\varepsilon&gt;0\\), exists \\(\\delta&gt;0\\) so that \\(|f(x)-f(y)|&lt;\\varepsilon\\) for all \\(x,y\\in\\mathring{U}(x_0, \\delta)\\).</li> <li>Prove with definition: \\(\\lim\\limits_{x\\to\\infty}\\left(1+\\dfrac{1}{x}\\right)^x=e\\).</li> </ol>"},{"location":"math/ma/prove-that/#continuity","title":"Continuity","text":"<ol> <li>Every irrational point of \\(R(x)\\) is continuous, every rational point of \\(R(x)\\) is removable discontinuous, where \\[R(x)=\\left\\{\\begin{align}\\frac{1}{q}&amp;\\quad \\text{if}\\ x=\\frac{p}{q}\\text{, with}\\ p\\in\\mathbb{Z}\\ \\text{and}\\ q\\in\\mathbb{N}\\ \\text{coprime.}\\\\0&amp;\\quad \\text{if}\\ x\\ \\text{is irrational.}\\end{align}\\right.\\] </li> <li>If \\(u=g(x)\\) is continuous at \\(x_0\\), and \\(y=f(u)\\) is continuous at \\(u_0=g(x_0)\\), then \\(f\\circ g(x)=f(g(x))\\) is continuous at \\(x_0\\).</li> <li>If \\(f(x)\\) is continuous in closed interval \\([a, b]\\),<ol> <li>then it is bounded in \\([a, b]\\).</li> <li>then \\(\\max f(x)\\) and \\(\\min f(x)\\) exists in \\([a, b]\\).</li> <li>and \\(f(a)\\cdot f(b)&lt;0\\), then exists \\(\\xi\\in(a, b)\\) so that \\(f(\\xi)=0\\).</li> <li>then it can reach all values between \\(\\min f(x)\\) and \\(\\max f(x)\\).</li> <li>(Cantor's theorem) then it is uniformly continuous in \\([a, b]\\).</li> </ol> </li> <li>The sufficient and necessary condition for \\(f(x)\\) to be uniformly continuous in \\(D\\) is that for all sequences \\(\\{x_n\\}, \\{y_n\\}\\in D^\\mathbb{N}\\) that satisfies \\(\\lim\\limits_{n\\to\\infty}(x_n-y_n)=0\\), \\(\\lim\\limits_{n\\to\\infty}(f(x_n)-f(y_n))=0\\).</li> <li>If \\(f(x)\\) is continuous in finite open interval \\((a, b)\\), then \\(f(x)\\) is uniformly continuous on \\((a, b)\\) if and only if \\(\\lim\\limits_{x\\to a^+}f(x)\\) and \\(\\lim\\limits_{x\\to b^-}f(x)\\) exist.</li> </ol>"},{"location":"math/ma/prove-that/#derivative","title":"Derivative","text":"<ol> <li>(Darboux's theorem) If \\(f(x)\\) is differentiable in \\((a, b)\\), then for every \\(y\\) between \\(f'(a)\\) and \\(f'(b)\\), there exists \\(\\xi\\in(a, b)\\) so that \\(f'(\\xi)=y\\).</li> <li>(Rolle's theorem) If \\(f(x)\\) is continuous in \\([a, b]\\), differentiable in \\((a, b)\\), and \\(f(a)=f(b)\\), then exists \\(\\xi\\in(a, b)\\) so that \\(f'(\\xi)=0\\).</li> <li>If \\(f(x)\\) is twice differentiable in \\([a, b]\\), and \\(f(a) = f(b) = 0\\), then \\(\\forall x\\in(a, b)\\), \\(\\exists\\xi\\in(a, b)\\), such that \\(2f(x) = f''(\\xi)(x - a)(x - b)\\).</li> <li>If \\(f'(x)\\) is bounded in \\((a, b)\\), then \\(f(x)\\) is uniformly continuous in \\((a, b)\\).</li> <li>If \\(f(x)\\) is twice differentiable at \\(x=0\\), \\(\\lim\\limits_{x\\to0}\\dfrac{f(x)}{x}=0\\), and \\(f''(0)=4\\),<ol> <li>find \\(\\lim\\limits_{x\\to0}\\dfrac{f(x)}{x^2}\\) and \\(\\lim\\limits_{x\\to0}\\left(1+\\dfrac{f(x)}{x}\\right)^{1/x}\\). (answer: \\(2\\) and \\(e^2\\))</li> <li>point out two mistakes: \\(\\lim\\limits_{x\\to0}\\dfrac{f(x)}{x^2}=\\lim\\limits_{x\\to0}\\dfrac{f'(x)}{2x}=\\lim\\limits_{x\\to0}\\dfrac{f''(x)}{2}=\\dfrac{1}{2}f''(0)=2\\).</li> </ol> </li> <li>Prove using Taylor series with Lagrange remainder: \\(e\\) is irrational.</li> </ol>"},{"location":"others/learning-plan/","title":"Learning Plan","text":"<p>A comment system is enabled in this page, leave your comments below if you have any suggestions.</p>"},{"location":"others/learning-plan/#basis","title":"Basis","text":""},{"location":"others/learning-plan/#general","title":"General","text":"<ul> <li> MIT Missing Semester.</li> <li> Computer Systems: A Programmer's Perspective (CSAPP). [SUSPENDING]</li> <li> UCB: Sysadmin DeCal. [SUSPENDING]</li> </ul>"},{"location":"others/learning-plan/#network","title":"Network","text":"<ul> <li> To-do.</li> </ul>"},{"location":"others/learning-plan/#operating-system","title":"Operating System","text":"<ul> <li> To-do.</li> </ul>"},{"location":"others/learning-plan/#languages","title":"Languages","text":"<p>Several languages that I am interested in.</p>"},{"location":"others/learning-plan/#python","title":"Python","text":"<ul> <li> CS61A: Structure and Interpretation of Computer Programs. [IN-PROGRESS]</li> </ul>"},{"location":"others/learning-plan/#haskell","title":"Haskell","text":"<ul> <li> To-do.</li> </ul>"},{"location":"others/learning-plan/#go","title":"Go","text":"<ul> <li> To-do.</li> </ul>"},{"location":"others/learning-plan/#read-source-code","title":"Read source code","text":"<ul> <li> hexo: @hexojs :: hexo</li> <li> manim: @3b1b :: manim</li> </ul>"},{"location":"others/learning-plan/#tools-skills","title":"Tools &amp; Skills","text":"<ul> <li> Typing.</li> <li> LaTeX.</li> <li> Docker.</li> <li> CMake.</li> <li> Matlab.</li> <li> Regex.</li> <li> Vim.</li> </ul>"},{"location":"others/macOS-command-collection/","title":"macOS Command Collection","text":"<p>Here is a collection of useful command-line tools for macOS.</p>"},{"location":"others/macOS-command-collection/#general","title":"General","text":"<ul> <li><code>eza</code>: Modern replacement for <code>ls</code>.</li> <li><code>bat</code>: Modern replacement for <code>cat</code>.</li> <li><code>fd</code>: Modern replacement for <code>find</code>.</li> <li><code>lazygit</code>: Terminal UI for <code>git</code>.</li> <li><code>nvim</code>: Neovim, modern replacement for <code>vim</code>.</li> <li><code>lvim</code>: Out-of-the-box Neovim config.</li> <li><code>tldr</code>: abbr. Too Long, Don't Read. Simplify the man page.</li> <li><code>j</code>: Jump to a directory. A zsh plugin.</li> <li><code>trans</code>: Translate text into Chinese in the terminal. <code>trans :en</code>, translate into English.</li> <li><code>nnn</code>: File manager.</li> <li><code>br</code>: Broot, a tree-view file manager.</li> <li><code>tree</code>: Show directory structure.</li> <li><code>pbcopy</code> / <code>pbpaste</code>: Copy / paste to / from clipboard. Built-in command.</li> <li><code>btop</code>: Resource monitor.</li> <li><code>neofetch</code>: Show system info.</li> </ul>"},{"location":"others/macOS-command-collection/#productivity","title":"Productivity","text":"<ul> <li><code>ffmpeg</code>: Video and audio converter.</li> <li><code>convert</code>: Image converter.</li> </ul>"},{"location":"others/macOS-command-collection/#ctf","title":"CTF","text":"<ul> <li><code>binwalk</code>: Analyze binary files for embedded files and executable code.</li> <li><code>foremost</code>: Recover files using their headers, footers and data structures.</li> <li><code>hashcat</code>: Password recovery tool.</li> <li><code>zip2hash</code>: Part of John the Ripper. Converts a zip file to a hash.</li> <li><code>ciphey</code>: Automated decryption tool.</li> <li><code>hexyl</code>: Command-line Hex viewer.</li> <li><code>nmap</code>: Port scanner.</li> <li><code>StegSolve.jar</code>: Steganography solver.</li> <li><code>exiftool</code>: Read and write meta information in files.</li> <li><code>zsteg</code>: Steganography detection for PNG and BMP file formats.</li> <li><code>pngcheck</code>: PNG file validator and debugger.</li> <li><code>strings</code>: Print printable characters in files.</li> </ul>"},{"location":"others/macOS-command-collection/#miscellaneous","title":"Miscellaneous","text":"<ul> <li><code>lolcat</code>: Colorful <code>cat</code>.</li> <li><code>cowsay</code> / <code>cowthink</code>: Configurable speaking / thinking cow.</li> <li><code>fortune</code>: Fortune cookie.</li> <li><code>nyancat</code>: Nyan cat in the terminal.</li> </ul>"},{"location":"others/things-i-should-do/","title":"Things I Should Do Before I Die","text":"<p>Every man dies. Not every man really lives.</p> <p>--William Wallace</p> <p>Aka. Bucket list. Content will be updated from time to time.</p> <ul> <li> Photography.</li> <li> Badminton.</li> <li> Astronomy.</li> <li> Psychology.</li> <li> Skydive.</li> <li> Scuba dive.</li> <li> Learn to swim.</li> <li> Fall in love.</li> <li> Horseback riding.</li> <li> Climb a mountain.</li> <li> Travel around the world.</li> <li> Achieve mastery in my field.</li> <li> Make a difference in one's life.</li> <li> Learn to play a musical instrument.</li> <li> See the northern lights.</li> <li> Further my education abroad.</li> <li> Befriend a foreigner.</li> <li> Get a pet.</li> <li> Volunteer.</li> <li> Go on a balloon ride.</li> </ul>"},{"location":"others/vim-cheatsheet/","title":"Vim Cheatsheet","text":"<p>Note that this cheatsheet is almost completely based on my lunarvim configuration and may only be intended for my personal use.</p>"},{"location":"others/vim-cheatsheet/#navigation","title":"Navigation","text":"<ul> <li><code>h</code> <code>j</code> <code>k</code> <code>l</code>: left / down / up / right</li> <li><code>w</code> <code>b</code>: next / previous word</li> <li><code>gg</code> <code>G</code>: top / bottom of file</li> <li><code>0</code> <code>$</code>: beginning / end of line</li> <li><code>^</code>: first non-blank character of line</li> <li><code>&lt;C-d&gt;</code> <code>&lt;C-u&gt;</code>: half page down / up</li> <li><code>&lt;C-f&gt;</code> <code>&lt;C-b&gt;</code>: full page down / up</li> <li><code>zt</code> <code>zz</code> <code>zb</code>: scroll cursor to top / middle / bottom of screen</li> <li><code>%</code>: jump to matching bracket</li> </ul>"},{"location":"others/vim-cheatsheet/#editing","title":"Editing","text":"<ul> <li><code>i</code> <code>a</code>: insert before / after cursor</li> <li><code>I</code> <code>A</code>: insert at beginning / end of line</li> <li><code>o</code> <code>O</code>: insert new line below / above</li> <li><code>x</code>: delete character under cursor</li> <li><code>rW</code>: replace character under cursor with <code>W</code></li> <li><code>R</code>: start replace mode</li> <li><code>cw</code>: change word</li> <li><code>c$</code>: change to end of line</li> <li><code>cc</code>: change line</li> <li><code>dd</code>: delete line</li> <li><code>u</code> <code>&lt;C-r&gt;</code>: undo / redo</li> <li><code>~</code>: switch case of character under cursor</li> <li><code>y</code>: copy text</li> <li><code>p</code>: paste after cursor</li> </ul>"},{"location":"others/vim-cheatsheet/#search","title":"Search","text":"<ul> <li><code>/</code>: search forward</li> <li><code>?</code>: search backward</li> <li><code>n</code> <code>N</code>: next / previous match</li> <li><code>*</code> <code>#</code>: search for word under cursor forward / backward</li> <li><code>gd</code>: go to definition of word under cursor</li> <li><code>gi</code>: go to last insert position</li> </ul>"},{"location":"others/vim-cheatsheet/#visual","title":"Visual","text":"<ul> <li><code>v</code>: start visual mode</li> <li><code>V</code>: start visual line mode</li> <li><code>&lt;C-v&gt;</code>: start visual block mode</li> <li><code>gv</code>: re-select last visual selection</li> <li><code>o</code>: move to other end of highlighted text</li> <li><code>a\"</code> <code>a'</code> <code>a(</code> <code>a[</code> <code>a{</code>: select matching block</li> <li><code>i\"</code> <code>i'</code> <code>i(</code> <code>i[</code> <code>i{</code>: select inner matching block</li> </ul>"},{"location":"others/vim-cheatsheet/#substitution","title":"Substitution","text":"<ul> <li><code>:s/foo/bar/</code>: replace first <code>foo</code> with <code>bar</code> in current line</li> <li><code>:%s/foo/bar/</code>: replace first <code>foo</code> with <code>bar</code> in file</li> </ul> <p>Flags:</p> <ul> <li>No flag: replace first occurrence</li> <li><code>g</code>: replace all occurrences</li> <li><code>c</code>: confirm before replace</li> <li><code>i</code>: case-insensitive</li> <li><code>I</code>: case-sensitive</li> </ul>"}]}